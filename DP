//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.math.*;
import java.io.*;

class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int n = sc.nextInt();
            Solution obj = new Solution();
            long topDownans = obj.topDown(n);
            long bottomUpans = obj.bottomUp(n);
            if (topDownans != bottomUpans)
                System.out.println(-1);
            else
                System.out.println(topDownans);
        }
    }
}

// } Driver Code Ends



class Solution {
    static int MOD = 1000000007;

    // Optimized top-down approach using iteration to avoid recursion depth issues
    static long topDown(int n) {
        if (n <= 1) return n; // Base cases: Fib(0) = 0, Fib(1) = 1

        // Array to store Fibonacci numbers
        long dp[] = new long[n + 1]; 
        dp[0] = 0; 
        dp[1] = 1;

        // Iteratively calculate Fibonacci numbers
        for (int i = 2; i <= n; i++) {
            dp[i] = (dp[i - 1] + dp[i - 2]) % MOD;
        }

        return dp[n];
    }

    // Bottom-up approach using iteration (same as above)
    static long bottomUp(int n) {
        if (n <= 1) return n; // Base cases

        long dp1[] = new long[n + 1]; // Array to store Fibonacci numbers

        dp1[0] = 0;
        dp1[1] = 1;

        // Iteratively calculate Fibonacci numbers
        for (int i = 2; i <= n; i++) {
            dp1[i] = (dp1[i - 1] + dp1[i - 2]) % MOD;
        }

        return dp1[n]; // Return the result for Fibonacci(n)
    }
}
