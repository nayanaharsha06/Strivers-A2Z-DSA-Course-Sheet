//{ Driver Code Starts
//Initial Template for Java

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;


class Array {
    
    // Driver code
	public static void main (String[] args) throws IOException{
		// Taking input using buffered reader
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int testcases = Integer.parseInt(br.readLine());
		
		// looping through all testcases
		while(testcases-- > 0){
		    String line = br.readLine();
		    String[] element = line.trim().split("\\s+");
		    int sizeOfArray = Integer.parseInt(element[0]);
		    int K = Integer.parseInt(element[1]);
		    
		    int arr [] = new int[sizeOfArray];
		    
		    line = br.readLine();
		    String[] elements = line.trim().split("\\s+");
		    for(int i = 0;i<sizeOfArray;i++){
		        arr[i] = Integer.parseInt(elements[i]);
		    }
		    
		    Solution obj = new Solution();
		    int res = obj.lenOfLongSubarr(arr, sizeOfArray, K);
		    
		    System.out.println(res);
		}
	}
}



// } Driver Code Ends


//https://www.youtube.com/watch?v=-TmXl8zo7mA
//User function Template for Java

class Solution{
    
   
    // Function for finding maximum and value pair
    /*  currentSum - K technique helps to efficiently check for the existence 
    of a sub-array with a sum of K by leveraging the hash map to keep track of
    previous cumulative sums.*/
    
    
    public static int lenOfLongSubarr (int A[], int N, int K) {
         HashMap<Integer, Integer> map = new HashMap<>();
        int maxLength = 0; // To store the length of the longest sub-array
        int currentSum = 0; // To store the cumulative sum

        // Iterate through the array
        for (int i = 0; i < A.length; i++) {
            currentSum += A[i];

            // Check if currentSum equals K
            if (currentSum == K) {
                maxLength = i + 1;
            }

            // Check if (currentSum - K) exists in the map
            if (map.containsKey(currentSum - K)) {
                int length = i - map.get(currentSum - K);
                maxLength = Math.max(maxLength, length);
            }

            // Store the first occurrence of currentSum in the map
            if (!map.containsKey(currentSum)) {
                map.put(currentSum, i);
            }
        }

        return maxLength;
    }
    
    
}
