//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            String S[] = read.readLine().split(" ");
            Long A = Long.parseLong(S[0]);
            Long B = Long.parseLong(S[1]);

            Solution ob = new Solution();
            Long[] ptr = ob.lcmAndGcd(A,B);
            
            System.out.print(ptr[0]);
            System.out.print(" ");
            System.out.println(ptr[1]);
        }
    }
}
// } Driver Code Ends


class Solution {
    static Long[] lcmAndGcd(Long A , Long B) {
        Long[] arr = new Long[2];
        
        // Compute GCD using subtraction method (Euclidean algorithm could be better)
        Long gcd = findGCD(A, B);
        
        // Compute LCM using the relationship: LCM * GCD = A * B
        Long lcm = (A * B) / gcd;
        
        arr[0] = lcm;
        arr[1] = gcd;
        
        return arr;
    }

    
    private static Long findGCD(Long a, Long b) {
        // Handle edge cases where either number is zero
        if (a == 0) return b;
        if (b == 0) return a;
        
        // Subtraction-based GCD calculation
        while (a != b) {
            if (a > b) {
                a = a - b;
            } else {
                b = b - a;
            }
        }
        return a;
    }
};
